#include"DataManager.h"

DataManager::DataManager()
{
	VectorVariableIndex = 0;
}

bool DataManager::LoadVectorData()
{
	std::fstream fin;
	//開啟檔案，傳入open函數的參數有兩個，欲開起的檔案名稱，開啟檔案的模式參數(這邊std::ios::in為讀取(輸入)狀態)
	fin.open(FileName, std::ios::in);
	//讀取失敗回傳false
	if (!fin)
	{
		return false;
	}
	else
	{
		//標記當前讀取向量ID
		int currentLoadVectorID = 0;
		//定義向量資料暫存變數
		std::vector<double> tempVectorData;
		//定義讀取檔案字串暫存變數
		std::string tempSring;
		//從檔案讀取字串，解析掉向量總數
		fin >> tempSring;
		
		//執行讀檔迴圈，並在讀到檔案結尾時結束
		while (!fin.eof())
		{
			//從檔案讀取字串
			fin >> tempSring;
			//解析到向量標記"V"
			if (tempSring == "V")
			{
				if (currentLoadVectorID != 0)
				{
					//定義暫存向量資料結構
					Vector tempVector;
					//存入向量資料
					tempVector.Data = tempVectorData;
					//定義向量變數名稱，依VectorVariableIndex變數作名稱的控管
					std::string vectorVariableTemp = "$v" + std::to_string(VectorVariableIndex);
					//存入向量變數名稱
					//存入向量
					Vectors[vectorVariableTemp] = tempVector;
					//遞增VectorVariableIndex，以確保變數名稱不重複
					VectorVariableIndex++;
					//清除向量資料暫存
					tempVectorData.clear();
				}
				//遞增currentLoadVectorID，標記到當前讀取向量ID
				currentLoadVectorID++;
				//從檔案讀取字串，解析掉向量維度
				fin >> tempSring;
			}
			else
			{
				//讀取向量資料，並將string轉為double
				double value;
				value = (double)strtod(tempSring.c_str(), NULL);
				//將向量資料存入暫存
				tempVectorData.push_back(value);
			}
			
		}
		//讀入輸入檔案中最後一個向量資訊
		Vector tempVector;
		tempVector.Data = tempVectorData;
		std::string vectorVariableTemp = "$v" + std::to_string(VectorVariableIndex);
		Vectors[vectorVariableTemp] = tempVector;
		VectorVariableIndex++;
		//讀取成功回傳false
		return true;
	}
}

std::map<std::string,Vector>& DataManager::GetVectors()
{
	return Vectors;
}

void DataManager::SetFileName(std::string fileName)
{
	FileName = fileName;
}

int priority(std::string in) {
	if (in == "+" || in == "-") {
		return 1;
	}
	else if (in == "*" || in == "/") {
		return 2;
	}
	else {
		//TODO:Error Detection
		return 0;
	}
}

void Infix2Postfix(std::vector<std::string>& fx) {
	try {
		std::vector<std::string> stack;
		std::vector<std::string> postfix;
		for (int i = 0, j = 0; i < fx.size(); i++)
		{
			std::string cur = fx[i];
			if (cur == "(") {
				stack.push_back(fx[i]);
			}
			else if (cur == "+" || cur == "-" || cur == "*" || cur == "/") {
				while (stack.size() > 0 && priority(stack.back()) > priority(cur)) {
					postfix.push_back(stack.back());
					stack.pop_back();
				}
				stack.push_back(cur);
			}
			else if (cur == ")") {
				while (stack.back() != "(")
				{
					postfix.push_back(stack.back());
					stack.pop_back();
				}
				stack.pop_back();
			}
			else {
				postfix.push_back(cur);
			}
		}
		while (stack.size()) {
			if (stack.back() == "(") throw std::exception("Lexical Error", -1);
			//TODO: Error Detection.
			postfix.push_back(stack.back());
			stack.pop_back();
		}
		fx = postfix;
	}
	catch (std::exception& e) {
		throw e;
	}
}

